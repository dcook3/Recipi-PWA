@page "/Following"
@using Recipi_PWA.Models;
@using Recipi_PWA.Models.PostView;
@using Recipi_PWA.Services;
@inject IPostService postService;
@inject IJSRuntime JSRuntime;
@inject StateContainer state;
@inject NavigationManager NavigationManager;
<PageTitle>Following Posts Feed</PageTitle>

<SearchBar></SearchBar>

@if (status == "loading")
{
    <div class="d-flex align-items-center justify-content-center" style="width:100%; height:100%;">
        <LoadingSpinner></LoadingSpinner>
    </div>
}
@if (status == "error")
{
    <div>
        @eMessage
    </div>
}
else
{
    if (postPreviews.Count == 0)
    {
        <div>
            <p>No posts found try following some more pages</p>
        </div>
    }
    else
    {
        <div style="width: 100%; height:100%; position:relative; overflow:hidden;">
            <div class="d-flex flex-column" style="width:100%; height: 300%; position:absolute; top:0px; transition-duration:500ms; transition-property:top;">
                @for (int i = 0; i < posts.Count(); i++)
                {

                    <div id="@i-post-wrapper" class="post-wrapper" style="width:100%; height: 33.4%; position:relative;">
                        @posts[i]
                    </div>

                }
            </div>
        </div>
    }

}


@code {
    private RenderFragment[] posts = new RenderFragment[3];


    private List<PostPreview> postPreviews = new List<PostPreview>();

    private DotNetObjectReference<FollowingPosts> _objectReference;

    private string status = "loading";

    private string eMessage = "";

    private int postIndex = 0;

    private bool inited = false;

    protected override async void OnInitialized()
    {
        inited = false;
        var response = await postService.GetFollowingPosts();
        if (response.IsSuccessStatusCode)
        {
            postPreviews = await response.Content.ReadFromJsonAsync<List<PostPreview>>();
            Console.WriteLine("Posts: " + postPreviews.Count());
            HttpResponseMessage post1Res = null;
            HttpResponseMessage post2Res = null;
            if (postPreviews.Count() > 0)
            {
                post1Res = await postService.GetPost(postPreviews[0].PostId);
                if (postPreviews.Count() > 1)
                {
                    post2Res = await postService.GetPost(postPreviews[1].PostId);
                }
            }
            if (post2Res == null && post1Res != null && post1Res.IsSuccessStatusCode)
            {
                var post1 = await post1Res.Content.ReadFromJsonAsync<Post>();
                posts[0] = (__builder) =>
                {
                    <PostView post="@post1" searchBar="true" AfterInit="PostLoaded"></PostView>
                };
                posts[1] = (__builder) =>
                {
                    <PostView focused="false" searchBar="true"></PostView>
                };
                posts[2] = (__builder) =>
                {
                    <PostView focused="false" searchBar="true"></PostView>
                };
                status = "ready";
            }
            else if (post1Res != null && post1Res.IsSuccessStatusCode && post2Res != null && post2Res.IsSuccessStatusCode)
            {
                var post1 = await post1Res.Content.ReadFromJsonAsync<Post>();
                var post2 = await post2Res.Content.ReadFromJsonAsync<Post>();
                posts[0] = (__builder) =>
                {
                    <PostView post="@post1" searchBar="true" renderBackButton="false" AfterInit="PostLoaded"></PostView>
                };
                posts[1] = (__builder) =>
                {
                    <PostView post="@post2" focused="false" searchBar="true" renderBackButton="false" AfterInit="PostLoaded"></PostView>
                };
                posts[2] = (__builder) =>
                {
                    <PostView focused="false" searchBar="true" renderBackButton="false"></PostView>
                };
                status = "ready";
            }
            else
            {
                status = "error";
                eMessage = await response.Content.ReadAsStringAsync();
            }
        }
        else
        {
            status = "error";
            eMessage = await response.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }

    private int initialPostsLoaded = 0;
    private async void PostLoaded()
    {
        var postsToLoad = 1;
        if (postPreviews.Count() <= 1)
        {
            postsToLoad = 0;
        }

        if (initialPostsLoaded < postsToLoad)
        {
            initialPostsLoaded++;
        }
        else
        {
            _objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("InitPostsSwipe", _objectReference, postPreviews.Count());
        }
    }

    public async void LoadPost(int postContainerIndex, int nextPostIndex)
    {
        var postRes = await postService.GetPost(postPreviews[nextPostIndex].PostId);
        if (postRes.IsSuccessStatusCode)
        {
            var post = await postRes.Content.ReadFromJsonAsync<Post>();
            posts[postContainerIndex] = null;
            StateHasChanged();
            posts[postContainerIndex] = (__builder) =>
                {
                    <PostView post="@post" renderBackButton="false" focused="false" AfterInit="@(() => {
                        JSRuntime.InvokeVoidAsync("InitPostSwipe", $"{postContainerIndex}-post-wrapper", _objectReference);
                    })" searchBar="true"></PostView>
                };

            StateHasChanged();
        }
    }

    [JSInvokable]
    public int NextPost(string direction, int index)
    {
        int nextPostIndex = -1;
        if (direction == "up")
        {
            if (postIndex > 0)
            {
                postIndex--;
                nextPostIndex = postIndex - 1;


            }
        }
        else
        {
            if (postIndex < postPreviews.Count())
            {
                postIndex++;
                nextPostIndex = postIndex + 1;
            }
        }
        if (nextPostIndex >= 0 && nextPostIndex < postPreviews.Count())
        {
            try
            {
                LoadPost(index, nextPostIndex);
            }
            catch
            {
                Console.WriteLine("catch");
            }
        }
        else if (nextPostIndex == postPreviews.Count())
        {
            posts[index] = null;
            StateHasChanged();
            posts[index] = (__builder) =>
            {
                <PostView focused="false" searchBar="true"></PostView>
            };
            StateHasChanged();
        }
        Console.WriteLine("c#: " + postIndex);
        return postIndex;
    }

}