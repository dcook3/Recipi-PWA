@page "/RecipeEditor/{recipeId:int}"

@using Recipi_PWA.Models;
@using Recipi_PWA.Services;
@using System.Text.Json;
@inject IRecipeService recipeService;
@inject StateContainer state;
@inject NavigationManager navi;

<div class="bg-primary container-fluid" style="height: 100%">
    <div class="d-flex justify-content-between">
        <button class="btn btn-warning rounded" @onclick="HandleRedirect"><i class="fa-solid fa-chevron-left"></i></button>
        <button class="btn btn-warning rounded" @onclick="AddStep">+</button>
    </div>

    <div class="d-flex flex-column align-items-center">
        @foreach (RecipeStep step in recipe.recipeSteps)
        {
            <EditableStepCard Step="step"></EditableStepCard>
        }
    </div>
    
    <div class="bg-secondary fixed-bottom" id="footer">

    </div>
</div>

@code {
    [Parameter]
    public int recipeId { get; set; } = -1;

    private Recipe recipe { get; set; } = new();

    protected async override Task OnParametersSetAsync()
    {
        recipe.IsStateless = false;
        if (recipeId > -1)
        {
            HttpResponseMessage response;
            response = await recipeService.GetRecipeById(recipeId);
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                recipe = JsonSerializer.Deserialize<Recipe>(responseBody) ?? new();
                await state.SaveNewRecipe(recipe);
            }
        }
        else
        {
            Console.WriteLine("Recipe ID was not passed.");
        }
    }

    private void HandleSubmit()
    {
        //save recipe into state and load PostEditor
    }

    private void HandleRedirect()
    {
        //this should return you to the last visited page when a navigation tracker has been established
        navi.NavigateTo("/CookbookViewer");
    }

    private void AddStep()
    {
        RecipeStep step = new();
        step.stepDescription = "New Step";
        step.stepOrder = recipe.recipeSteps[recipe.recipeSteps.Count - 1].stepOrder + 1;
        recipe.recipeSteps.Add(step);
        StateHasChanged();
    }
}
