@page "/RecipeEditor/{isPosting:bool}"

@using Recipi_PWA.Models;
@using Recipi_PWA.Services;
@using System.Text.Json;
@inject IRecipeService recipeService;
@inject StateContainer state;
@inject NavigationManager navi;
@inject IJSRuntime jsr
@layout EmptyLayout

<div class="bg-primary container-fluid pt-1" style="height: 100%">
    <div class="d-flex justify-content-between">
        <button class="btn btn-warning rounded" @onclick="HandleRedirect"><i class="fa-solid fa-chevron-left text-white"></i></button>
        <button class="btn btn-warning rounded text-white" @onclick="AddStep">+</button>
    </div>

    <div class="d-flex flex-column align-items-center">
        @if(isReady)
            @foreach (RecipeStep step in recipe.recipeSteps)
            {
                string up = "up";
                string down = "down";
                int id = step.stepId;
                <EditableStepCard 
                    @ref="StepRef"
                    Step="step" 
                    DeleteStep="() => DeleteStep(step)"
                    ShiftUp="() => ShiftStep(step, up)"
                    ShiftDown="() => ShiftStep(step, down)"
                    HandleInsertIngredient="HandleInsertIngredient">
                </EditableStepCard>
            }
    </div>
    
    <div class="bg-secondary fixed-bottom d-flex align-items-center justify-content-between" id="footer">
        <div class="d-flex flex-column me-2">
            <input type="text" class="minimal-input fs-2 mb-1 text-white ps-1" @bind-value="recipe.recipeTitle" style="width: 100%"/>
            <input type="text" class="minimal-input no-line fst-italic text-light ps-1" @bind-value="recipe.recipeDescription" style="width: 100%" />
        </div>
        <button @onclick="HandleSubmit" class="btn btn-warning rounded text-white d-flex align-items-center me-3" style="height: 50px; width: auto;">Done <i class="fa-solid fa-chevron-right"></i></button>
    </div>
</div>

@code {
    // NOTE: Never post recipe to db from this page. Only update! Posting will cause duplicate records! -Dylan

    private Recipe recipe { get; set; }
    private bool IsEditing = false;
    private EditableStepCard stepRef;
    public EditableStepCard StepRef
    {
        get => stepRef;
        set
        {
            stepRef = value;
            steps.Add(value);
        }
    }
    private List<EditableStepCard> steps = new();
    private int cursorPosition;
    private bool isReady = false;

    //Consider converting to cascading value
    [Parameter]
    public bool isPosting { get; set; }

    protected async override Task OnInitializedAsync()
    {
        recipe = await state.GetRecipe();
        isReady = true;
    }

    private async void HandleSubmit()
    {
        await state.SaveNewRecipe(recipe);
        await recipeService.PutRecipe(recipe);
        if(isPosting)
        {
            navi.NavigateTo("/StepRecord");
        }
        else
        {
            navi.NavigateTo("/me");
        }
    }

    private void HandleRedirect()
    {
        //this should return you to the last visited page when a navigation tracker has been established
        navi.NavigateTo("/CookbookViewer");
    }

    private void AddStep()
    {
        int calculatedOrder = recipe.recipeSteps[recipe.recipeSteps.Count - 1].stepOrder + 1;
        RecipeStep step = new("New Step", calculatedOrder);
        recipe.recipeSteps.Add(step);
        recipe.OrganizeSteps();
        StateHasChanged();
    }

    private void DeleteStep(RecipeStep step)
    {
        int stepIndex = recipe.recipeSteps.IndexOf(step);
        recipe.recipeSteps.Remove(step);
        for(int i = stepIndex; i < recipe.recipeSteps.Count; i++)
        {
            recipe.recipeSteps[i].stepOrder = recipe.recipeSteps[i].stepOrder - 1;
        }
        StateHasChanged();
    }

    private void ShiftStep(RecipeStep step, string direction)
    {
        int stepIndex = recipe.recipeSteps.IndexOf(step);
        if (direction == "up" && stepIndex > 0)
        {
            int prior = recipe.recipeSteps[stepIndex - 1].stepOrder;
            recipe.recipeSteps[stepIndex - 1].stepOrder = recipe.recipeSteps[stepIndex].stepOrder;
            recipe.recipeSteps[stepIndex].stepOrder = prior;
        }
        else if (direction == "down" && stepIndex < recipe.recipeSteps.Count - 1)
        {
            int next = recipe.recipeSteps[stepIndex + 1].stepOrder;
            recipe.recipeSteps[stepIndex + 1].stepOrder = recipe.recipeSteps[stepIndex].stepOrder;
            recipe.recipeSteps[stepIndex].stepOrder = next;
        }
        else
        {
            Console.WriteLine($"Ignoring going {direction} on step {step.stepDescription}. It remains at step order {step.stepOrder}");
        }
        recipe.OrganizeSteps();
        StateHasChanged();
    }

    private async void HandleInsertIngredient(RecipeStep step, InputText text)
    {
        int pos = await jsr.InvokeAsync<int>("getSelectedStart", text.Element);
        int stepIndex = recipe.recipeSteps.IndexOf(step);
        string desc = recipe.recipeSteps[stepIndex].stepDescription;
        string toInsert = "{" + (recipe.recipeSteps[stepIndex].stepIngredients.Count) + "}";
        recipe.recipeSteps[stepIndex].stepDescription = desc.Insert(pos, toInsert);
        await state.SaveRecipe();
        navi.NavigateTo($"/IngredientSelector/{step.stepId}/{isPosting}");
    }
}
