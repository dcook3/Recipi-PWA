@page "/Register"
@using System.Text.RegularExpressions;
@using Recipi_PWA.Models;
@using System.Net;
@inject IUserService userService;
@inject NavigationManager NavigationManager;
@inject StateContainer state;

<div class="bg-primary" style="height: 100vh; width: 100vw; padding-top: 20vh;">
    <div class="container-fluid d-flex flex-column align-items-center justify-content-between" style="height: 65%">
        <div style="height: 10%" class="d-flex flex-column align-items-center justify-content-center">
            <h1 class="text-light">Welcome to Recipi</h1>
        </div>
        <form class="d-flex flex-column justify-content-between align-items-center" style="height: 40%;">
            <div class="form-group">
                <label for="username" class="text-light fs-8">Username</label>
                <InputText class="form-control" type="text" @bind-Value="ur.Username" DisplayName="username" id="username"></InputText>
            </div>
            <div class="form-group">
                <label for="email" class="text-light fs-8">Email</label>
                <InputText class="form-control" type="text" @bind-Value="ur.Email" DisplayName="email" id="email"></InputText>
            </div>


            <div class="form-group">
                <label for="pass" class="text-light fs-8">Password</label>
                <InputText class = "form-control" type="password" @bind-Value="@password" @oninput="CheckPassword"  DisplayName="pass" id="pass"></InputText>
            </div>

            <div class="form-group">
                <label for="biography" class="text-light fs-8">Biography</label>
                <InputText class="form-control" type="textarea" @bind-Value="ur.Biography" DisplayName="biography" id="biography"></InputText>
            </div>

            <div class="form-group">
                <label for="biography" class="text-light fs-8">Biography</label>
                <input type="file" @bind-value="profileUrl" @oninput="OnFileUpload" accept="image/*" capture="camera"/>
            </div>
            
            <Button onclick="@Submit" status="@status">
                Submit
            </Button>

            @if ((password != "" && !validPassword) || status == "error")
            {
                <div class="form-group d-flex flex-column align-items-center justify-content-center p-1 rounded-1 bg-warning" style="width: 70%">

                    @if (!validPassword) {
                        <PasswordValidationMessage valid="@hasNumber.IsMatch(password)">Password Must Contain a Number</PasswordValidationMessage>
                        <PasswordValidationMessage valid="@hasNumber.IsMatch(password)">Password Must Contain 1 Upper Case Character</PasswordValidationMessage>
                        <PasswordValidationMessage valid="@hasNumber.IsMatch(password)">Password Must Have Atleast 8 Characters</PasswordValidationMessage>
                    }

                    @if (status == "error")
                    {
                        @eMessage
                    }


                </div>
            }

        </form>

        <div></div>

    </div>
</div>

@code {
    private UserRegistration ur = new();

    private string password = "";

    private string profileUrl = "";

    private Regex hasNumber = new Regex(@"[0-9]+");
    private Regex hasUpperChar = new Regex(@"[A-Z]+");
    private Regex hasMinimum8Chars = new Regex(@".{8,}");

    private bool validPassword = false;

    private string status = "ready";
    private string eMessage = "";


    private void OnFileUpload()
    {
        Console.WriteLine(profileUrl);
    }

    protected override void OnInitialized()
    {
        if(state.LoggedIn)
        {
            //NavigationManager.NavigateTo("/");
        }
    }

    public async void Submit()
    {
        status = "loading";
        StateHasChanged();
        if (validPassword)
        {
            ur.Password = BCrypt.Net.BCrypt.HashPassword(password);

            ur.ProfilePicture = "";

            var response = await userService.Register(ur);
            if (response.IsSuccessStatusCode)
            {
                LoginReqest(ur.Username, ur.Password);
            }
            else
            {
                Console.WriteLine(response);
                status = "error";
                eMessage = await response.Content.ReadAsStringAsync();
            }
        }
        else
        {
            status = "error";
        }
        StateHasChanged();
    }

    public void CheckPassword()
    {
        validPassword = hasNumber.IsMatch(password) &&
                        hasUpperChar.IsMatch(password) &&
                        hasMinimum8Chars.IsMatch(password);

        StateHasChanged();
    }


    public async void LoginReqest(string credential, string password)
    {
        HttpResponseMessage response = await userService.Login(new() { Credential = credential, Password = password });
        if (response.IsSuccessStatusCode)
        {
            await state.SetToken(await response.Content.ReadAsStringAsync());

            NavigationManager.NavigateTo("/");
        }
        else
        {
            status = "error";
            eMessage = await response.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }
}
