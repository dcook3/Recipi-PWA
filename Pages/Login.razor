@page "/Login"
@using System.Text.RegularExpressions;
@using Recipi_PWA.Models;
@using System.Net;
@layout EmptyLayout
@inject IUserService userService;
@inject NavigationManager NavigationManager;
@inject StateContainer state;
<div class="bg-primary" style="height: 100vh; width: 100vw; padding-top: 20vh;">
    <div class="p-3" style="position:fixed; top:0; left: 0; ">
        <Button onclick="@Back" bgColor="" shape="circle"><i class="fa-solid fa-chevron-left"></i></Button>
    </div>
    <div class="container-fluid d-flex flex-column align-items-center justify-content-between" style="height: 65%">
        <div style="height: 10%" class="d-flex flex-column align-items-center justify-content-center">
            <h1 class="text-light">Recipi</h1>
            <p class="text-light">Welcome Back!</p>
        </div>
        <form class="d-flex flex-column justify-content-between align-items-center"style="height: 50%;">
            <div class="form-group">
                <label for="cred" class="text-light fs-8">Username or Email</label>
                <InputText class="form-control" @bind-Value="credential" DisplayName="Username or Email" id="cred" tabindex="1"></InputText>
            </div>
            <div class ="form-group">
                <label for="pass" class="text-light fs-8">Password</label>
                <InputText class="form-control" type="password" @bind-Value="password" DisplayName="Password" id="pass" tabindex="2"></InputText>
            </div>

            <div class="container-fluid d-flex flex-row justify-content-evenly align-items-center" style="margin-top: 20px;">
                <Button Height="2" Width="6" onclick="NavigateToRegister" tabIndex="3">
                    Register
                </Button>

                <Button Height="2" Width="6" onclick="LoginReqest" status="@status" tabIndex="4">
                    Login
                </Button>

            
            </div>
        </form>

        <div class="text-danger">
        @if (status == "error")
        {
            @eMessage
        }
        </div>

    </div>
</div>
@code{
    private string credential = "";
    private string password = "";

    private string status = "ready";
    private string eMessage;

    private void Back()
    {
        NavigationManager.NavigateTo("/");
    }


    public async void LoginReqest()
    {
        status = "loading";
        StateHasChanged();
        HttpResponseMessage response = await userService.Login(new() { Credential = credential, Password = password });
        if (response.IsSuccessStatusCode)
        {
            await state.SetToken(await response.Content.ReadAsStringAsync());

            var youResponse = await userService.GetUserById("me");

            if (response.IsSuccessStatusCode)
            {
                await state.SetYou(await youResponse.Content.ReadFromJsonAsync<You>());
            }

            await state.GetSetting();

            NavigationManager.NavigateTo("/");
        }
        else
        {
            status = "error";
            eMessage = await response.Content.ReadAsStringAsync();
        }
        StateHasChanged();
    }

    public void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/Register");
    }
    

}