@using Recipi_PWA.Services
@using Recipi_PWA.Models;
@using System.Text.Json;
@using Recipi_PWA.Shared.Profile;

@inject StateContainer state
@inject NavigationManager navi
@inject IIngredientService service

@page "/IngredientSelector/{recipeId:int}/{stepIndex:int}/{isPosting:bool}"


<TopViewport>
    <div class="row py-1">
        <a @onclick="BackToRecipeEditor" class="fs-3 ps-4 col-4 text-decoration-none text-white align-middle">‹</a> @*This will go back*@
        <h3 class="text-white mb-0 col-4 d-inline-block text-center pt-1">Ingredients</h3>
        <div class="col-4"></div>
    </div>
</TopViewport>

<input class="form-control rounded" @bind-value="searchTerm" @onkeydown="@CheckTimeout" placeholder="Find an ingredient..." />

<CascadingValue Value="@recipeInfo">
    <CascadingValue Value="@isPosting">
        <CascadingValue Value="@recipeId">
            <CascadingValue Value="@stepIndex">
                <IngredientsList @ref="ingredientsList" ingredients="@ingredients"></IngredientsList>
            </CascadingValue>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public int stepIndex { get; set; }

    [Parameter]
    public bool isPosting { get; set; }

    [Parameter]
    public int recipeId { get; set; }

    private RecipeInformation recipeInfo;
    private List<Ingredient> ingredients;
    private int LastSearchLength = 0;
    private IngredientsList ingredientsList;
    private string searchTerm;

    protected override async Task OnInitializedAsync()
    {
        recipeInfo = await state.GetRecipe();
        HttpResponseMessage response = await service.GetIngredients();
        if (response.IsSuccessStatusCode)
        {
            string jsonString = await response.Content.ReadAsStringAsync();
            ingredients = JsonSerializer.Deserialize<List<Ingredient>>(jsonString) ?? new();
        }
        else
        {
            Console.WriteLine("There was a problem while fetching ingredients from the server. Please reload or try again later.");
        }
    }

    private void BackToRecipeEditor()
    {
        navi.NavigateTo($"/RecipeEditor/{recipeId}/{isPosting}");
    }

    private async void CheckTimeout(KeyboardEventArgs e)
    {
        int charDiff = Math.Abs(LastSearchLength - searchTerm.Length);
        if(charDiff >= 3 || LastSearchLength == 0)
        {
            Console.WriteLine("Performing an ingredient search...");
            LastSearchLength = searchTerm.Length;
            HttpResponseMessage response = await service.SearchIngredients(searchTerm);
            if (response.IsSuccessStatusCode)
            {
                string jsonString = await response.Content.ReadAsStringAsync();
                ingredients = JsonSerializer.Deserialize<List<Ingredient>>(jsonString) ?? new();
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("There was a problem while fetching ingredients from the server. Please reload or try again later.");
            }
        }
    }
}