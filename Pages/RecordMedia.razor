
@page "/RecordMedia";
@layout EmptyLayout;

@using System.Text;

@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
<style>
    .hidden {
        display: none;
    }

    .video-container {
        float:left;
        z-index:-999;
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
    }

    .video-container video {
        /* Make video to at least 100% wide and tall */
        min-width: 100%;
        min-height: 100%;
        /* Setting width & height to auto prevents the browser from stretching or squishing the video */
        width: auto;
        height: auto;
        /* Center the video */
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
    }

    .bottom-media-control-container > div {
        width: 20%;
        display:flex;
        align-items:center;
        justify-content:center;
    }
</style>


<div class="video-container">
    <video id="preview" class="@previewClass" autoplay muted />
    
    <video id="result" class="@resClass" autoplay loop />
</div>

    <div class="container-fluid d-flex flex-column justify-content-between py-3" onclick="@TogglePlayback" style="height:90vh;">
        <div class="container-fluid d-flex flex-row justify-content-between">
            <Button onclick="@Back" shape="circle"><i class="fa-solid fa-chevron-left"></i></Button>
            <div></div>
        </div>
    <div class="bottom-media-control-container container-fluid d-flex justify-content-evenly align-items-center flex-row">
       
            @if (status == "ready") 
            {
                <div></div>
                <div>
                    <Button onclick="@StartRecording" shape="circle" bgColor="bg-danger"><i class="fs-1 fa-solid fa-square text-danger"></i></Button>
                </div>
                <div onclick="@NextCamera">
                    <i class="fs-1 fa-solid fa-camera-rotate text-light"></i>
                </div>
            }
            else if(status == "recording")
            {
                <div></div>
                <div>
                    <Button onclick="@StopRecording" shape="circle" bgColor="bg-danger"><i class="fs-1 fa-solid fa-square text-light"></i></Button>
                </div>
                <div></div>
            }

        </div>
    </div>

    <div class="container-fluid d-flex flex-row align-items-center justify-content-between py-1 px-2  bg-primary" style="position:fixed; bottom:0; height:10vh">
        <Button width="140"><span>Attach Recipe</span></Button>
        @if (status == "recorded")
        {
            <Button> Next <span><i class="fa-solid fa-chevron-right"></i></span></Button>
        }
        else
        {
            <Button disabled bgColor="bg-dark-subtle"> Next <span><i class="fa-solid fa-chevron-right"></i></span></Button>
        }

    </div>


@code {
    private string status = "ready";
    private string recordingUrl = "";

    private string resClass = "hidden";
    private string previewClass = "";

    private ElementReference preview;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            await JSRuntime.InvokeVoidAsync("InitializeVideo");
        }
    }

    private void TogglePlayback()
    {
        JSRuntime.InvokeVoidAsync("TogglePlayback");
    }
    private void NextCamera()
    {
        JSRuntime.InvokeVoidAsync("NextCamera");
    }

    private async void Back()
    {
        if (status == "ready")
        {
            NavigationManager.NavigateTo("/");
        }
        else if(status == "recorded")
        {
            status = "ready";
            resClass = "hidden";
            previewClass = "";
            StateHasChanged();
        }
    }

    private void ResultChanged()
    {
        resClass = "";
        previewClass = "hidden";
        StateHasChanged();
    }

    private async void StartRecording()
    {
        status = "recording";
        StateHasChanged();
        var source = await JSRuntime.InvokeAsync<string>("StartRecording");
        //WAITS FOR THE RECORDING TO FINISH
        var bytes = Encoding.ASCII.GetBytes(source);
        FileStream stream = File.Open("test.webm", FileMode.Create, FileAccess.ReadWrite);
        stream.Write(bytes);
        status = "recorded";
        ResultChanged();


    }

    
    private async void StopRecording()
    {
        await JSRuntime.InvokeVoidAsync("StopRecording");
    }

}
