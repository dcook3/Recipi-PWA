@page "/CookbookViewer"

@using Recipi_PWA.Shared.Profile
@using Recipi_PWA.Models
@using Recipi_PWA.Services;
@using System.Text.Json;
@inject StateContainer state
@inject IRecipeService recipeService;
@inject HttpClient http
@inject NavigationManager navi
@inject IRecipeService recipeService
@layout EmptyLayout

<TopViewport>
    <div class="row justify-content-center pt-1">
        <a href="this will be the last page from a navigation service" class="fs-2 col-1 me-5 text-decoration-none">‹</a> @*This will go back*@
        <h3 class="text-white col-auto ms-5 d-inline-block">Your Cookbook</h3>
        <a class="fs-2 col-2 me-5 text-decoration-none"></a>
    </div>
</TopViewport>

<div class="d-inline-flex flex-column align-items-center" style="width: 100%;">
    @if (recipes.Count > 0)
        @foreach (var recipe in recipes)
        {
            <CookbookRecipeCard recipe="recipe" OnClick="() => HandleRecipeNav(recipe.RecipeId)" />
        }
</div>

<div class="d-flex me-2 justify-content-end">
    <button class="btn btn-warning rounded" @onclick="HandleNewRecipe"><i class="fa-solid fa-plus text-white"></i></button>
</div>


@code {
    private List<CookbookRecipe> recipes = new();

    protected override async Task OnInitializedAsync()
    {
        if (state.LoggedIn)
        {
            HttpResponseMessage response = await recipeService.GetCookbook("");
            if (response.IsSuccessStatusCode)
            {
                recipes = await response.Content.ReadFromJsonAsync<List<CookbookRecipe>>() ?? new();
            }
        }
        else
        {
            navi.NavigateTo("/Login");
        }
    }

    private async void HandleRecipeNav(int recipeId) 
    {
        HttpResponseMessage response;
        response = await recipeService.GetRecipeById(recipeId);
        if (response.IsSuccessStatusCode)
        {
            string responseBody = await response.Content.ReadAsStringAsync();
            Recipe recipe = JsonSerializer.Deserialize<Recipe>(responseBody) ?? new();
            await state.SaveNewRecipe(recipe);
        }
        else
        {
            Console.WriteLine($"Server responded with status code {response.StatusCode}");
        }
        navi.NavigateTo($"/RecipeEditor");
    }

    private async void HandleNewRecipe()
    {
        Recipe recipe = new();
        await state.SaveNewRecipe(recipe);
        HttpResponseMessage response = await recipeService.PostRecipe(recipe);
        if (response.IsSuccessStatusCode)
        {
            int recipeId = int.Parse(await response.Content.ReadAsStringAsync());
            navi.NavigateTo($"/RecipeEditor");
        }
        else
        {
            Console.WriteLine($"Server repsonded with {response.StatusCode} when posting new recipe");
        }

    }
}
