@page "/CookbookViewer"

@using Recipi_PWA.Shared.Profile
@using Recipi_PWA.Models
@using Recipi_PWA.Services;
@using System.Text.Json;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject StateContainer state
@inject IRecipeService recipeService;
@inject HttpClient http
@inject NavigationManager navi
@inject PageHistoryState history
@layout EmptyLayout

<TopViewport>
    <div class="row py-1 m-0">
        <a href="@history.GetGoBackPage()" class="fs-3 ps-4 col-4 text-decoration-none text-white align-middle">‹</a> @*This will go back*@
        <h3 class="text-white mb-0 col-4 d-inline-block text-center pt-1">Your Cookbook</h3>
        <div class="col-4"></div>
    </div>
</TopViewport>

<div class="d-inline-flex flex-column align-items-center" style="width: 100%;">
    @if (recipes.Count > 0)
        @foreach (var recipe in recipes)
        {
            <CookbookRecipeCard recipe="recipe" OnClick="() => HandleRecipeNav(recipe.RecipeId)" />
        }
</div>

<div class="d-flex me-2 justify-content-end">
    <button class="btn btn-warning rounded" @onclick="HandleEmptyRecipe"><i class="fa-solid fa-plus text-white"></i></button>
</div>

@code {
    private List<CookbookRecipe> recipes = new();

    protected override async Task OnInitializedAsync()
    {
        history.AddPageToHistory("/CookbookViewer");
        if (state.LoggedIn)
        {
            HttpResponseMessage response = await recipeService.GetCookbook("");
            if (response.IsSuccessStatusCode)
            {
                recipes = await response.Content.ReadFromJsonAsync<List<CookbookRecipe>>() ?? new();
            }
        }
        else
        {
            navi.NavigateTo("/Login");
        }
    }

    private async void HandleRecipeNav(int recipeId)
    {
        HttpResponseMessage response;
        response = await recipeService.GetRecipeById(recipeId);
        if (response.IsSuccessStatusCode)
        {
            //string responseBody = await response.Content.ReadAsStringAsync();
            Recipe recipe = await response.Content.ReadFromJsonAsync<Recipe>() ?? new();
            RecipeInformation recipeInfo = new();
            recipeInfo.recipe = recipe;
            await state.SaveRecipe(recipeInfo);
            navi.NavigateTo($"/CreatePost/{recipeId}");
        }
        else
        {
            Console.WriteLine($"Server responded with status code {response.StatusCode}");
        }

    }

    private async void HandleEmptyRecipe()
    {
        Recipe recipe = new();
        recipe.recipeSteps.Add(new());
        RecipeInformation recipeInfo = new();
        recipeInfo.isNewRecipe = true;
        recipeInfo.recipe = recipe;
        await state.SaveRecipe(recipeInfo);
        navi.NavigateTo($"/RecipeEditor/{recipeInfo.recipeId}/true");
    }
}
