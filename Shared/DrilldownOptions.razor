@using Microsoft.JSInterop;
@using System.Text.Json;
@using System.Net.Http;
@using Recipi_PWA.Models;
@using Recipi_PWA.Models.Settings;

@inject HttpClient Http
@inject StateContainer StateContainer

<TopViewport>
    @if (!isRoot)
    {
        <a @onclick="LoadLastSetting"><i class="fs-1 text-center fa-solid text-white fa-caret-left "></i></a>
    }
    else
    {
        <a @onclick="OuterSubmitHandler"><i class="fs-1 text-center fa-solid text-white fa-caret-left "></i></a>
    }
</TopViewport>

<ul class="list-group list-group-flush fs-4">
    @if (isRoot)
    {
        <li class="list-group-item d-flex align-items-center justify-content-between m-3">
            <a href="@settings.changeProfile.label"> Change profile</a>
        </li>
        <li class="list-group-item d-flex align-items-center justify-content-between m-3">
            <a href="@settings.changePassword.label">Change password</a>
        </li>
        <li class="list-group-item form-check form-switch d-flex align-items-center justify-content-between mx-3">
            <label>@settings.anonymousUsername.label</label>
            <input type="checkbox" role="switch" class="form-check-input" id="anonymousName" @bind-value="anonymousName" />
        </li>
        <li class="list-group-item d-flex align-items-center justify-content-between m-3">
            <a @onclick="NotificationHandler" href="profile/settings#" >Notifications Settings</a>
        </li>
    }
    else
    {
        @foreach (var opti in selectedInner)
        {
            <li class="list-group-item d-flex align-items-center justify-content-between m-3">
                @if (opti is StringSetting)
                {
                    StringSetting setting = new(opti.label, opti.value);
                    <label for="@opti.label">@opti.label</label>
                    <InputText class="form-control" @bind-Value="setting.value"></InputText>
                }
                else if (opti is NumberSetting)
                {
                    NumberSetting setting = opti as NumberSetting;
                    <label for="@opti.label">@opti.label</label>
                    <InputNumber class="form-control" @bind-Value="setting.value"></InputNumber>
                }
                else
                {
                    BoolSetting setting = opti as BoolSetting;
                    <div class="form-check form-switch d-flex justify-content-between">
                        <label for="@opti.label">@opti.label</label>
                        <InputCheckbox class="form-switch" @bind-Value="setting.value"></InputCheckbox>
                    </div>
                }
            </li>
        }
    }
</ul>

@code {
    [Parameter]
    public string jsonString { get; set; }
    public Setting settings;
    public Stack<string> selectedInners = new();
    public List<SettingOption> selectedInner;
    public bool isRoot = true;
    public string thisSetting = "root";

    private bool anonymousName { get; set; } = false;
    private Dictionary<string, string> innerVals = new();
    private bool isFirstInitialization = true;

    protected async override Task OnInitializedAsync()
    {
        if (isFirstInitialization)
        {
            if (string.IsNullOrEmpty(jsonString))
            {
                settings = new Setting();
                await StateContainer.SaveSetting();
                jsonString = JsonSerializer.Serialize(settings);
            }
            else
            {
                settings = JsonSerializer.Deserialize<Setting>(jsonString);
            }
        }
        else
        {
            isFirstInitialization = false;
        }

    }

    private async void OuterSubmitHandler()
    {
        //Handle root settings here
        settings.anonymousUsername.value = anonymousName;

        await StateContainer.SaveSetting();
    }

    private void NotificationHandler()
    {
        thisSetting = "notification";
        selectedInner = settings.notifications;
        isRoot = false;
        _ = InvokeAsync(() =>
        {
            selectedInners.Push(thisSetting);
            StateHasChanged();
        });
    }

    private void LoadLastSetting()
    {
        if(thisSetting == "notifications")
        {
            for (int i = 0; i < selectedInner.Count; i++)
            {
                if (selectedInner[i] is StringSetting)
                {
                    settings.notifications[i] = selectedInner[i] as StringSetting;
                }
                else if (selectedInner[i] is NumberSetting)
                {
                    settings.notifications[i] = selectedInner[i] as NumberSetting;
                }
                else if (selectedInner[i] is BoolSetting)
                {
                    settings.notifications[i] = selectedInner[i] as BoolSetting;
                }
            }
        }
        //add onto this when more inner settings are available

        if (selectedInners.TryPop(out string toLoad))
        {
            //add any other sub settings as options to link their components
            if (toLoad == "notifications")
            {
                thisSetting = "notifications";
                selectedInner = settings.notifications;
                isRoot = false;
            }
        }
        else
        {
            isRoot = true;
            thisSetting = "root";
        }
        _ = InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}