@using Microsoft.JSInterop;
@using System.Text.Json;
@using System.Net.Http;
@using Recipi_PWA.Models;
@using Recipi_PWA.Models.Settings;
@using Recipi_PWA.Services;

@inject IMediaUploadService mediaUploadService;
@inject IPostService postService;
@inject IRecipeService recipeService;
@inject IUserService userService;
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
<TopViewport>
    @if (!isRoot)
    {
        <a class="ms-3" @onclick="LoadLastSetting"><i class="fs-5 fa-solid text-white fa-caret-left"></i></a>
        <h3 class="text-white text-center mt-1 d-inline-block">@thisSetting</h3>
    }
    else
    {
        <h3 class="text-white text-center mt-1 align-middle">Settings</h3>
    }
</TopViewport>
@{
    void GenerateInnerListItems(InnerSettingsGroup innerSettings)
    {
        if (innerSettings != null && innerSettings.boolSettings.Count > 0)
            for(int i = 0; i < innerSettings.boolSettings.Count; i++)
            {
                var ii = i;
                <li class="list-group-item">
                    <div class="form-check form-switch d-flex align-items-center justify-content-between m-3">
                        <label for="@innerSettings.boolSettings[i].label">@innerSettings.boolSettings[i].label</label>
                        <input type="checkbox" role="switch" class="form-check-input" id="@innerSettings.boolSettings[i].label" @bind="innerSettings.boolSettings[ii].value"></input>
                    </div>
                </li>
            }
        else if (innerSettings != null && innerSettings.stringSettings.Count > 0)
        {
            for (int i = 0; i < innerSettings.stringSettings.Count; i++)
            {
                var ii = i;
                <li class="list-group-item d-flex align-items-center justify-content-between m-3">
                    <label for="@innerSettings.stringSettings[i].label">@innerSettings.stringSettings[i].label</label>
                    <InputText class="form-control" id="@innerSettings.stringSettings[i].label" @bind-Value="innerSettings.stringSettings[ii].value"></InputText>
                </li>
            }
        }
        else if (innerSettings != null && innerSettings.numberSettings.Count > 0)
        {
            for (int i = 0; i < innerSettings.numberSettings.Count; i++)
            {
                var ii = i;
                <li class="list-group-item d-flex align-items-center justify-content-between m-3">
                    <label for="@innerSettings.numberSettings[i].label">@innerSettings.numberSettings[i].label</label>
                    <InputNumber class="form-control" id="@innerSettings.numberSettings[i].label" @bind-Value="innerSettings.numberSettings[ii].value"></InputNumber>
                </li>
            }
        }
    }
}
<ul class="list-group list-group-flush" style="width: 100%;">
    @if (isRoot)
    {
        <li class="list-group-item d-flex align-items-center justify-content-between m-3">
            <a href="@settings.ChangeProfile.label"> Change profile</a>
        </li>
        <li class="list-group-item d-flex align-items-center justify-content-between m-3">
            <a href="@settings.ChangePassword.label">Change password</a>
        </li>
        <li class="list-group-item form-check form-switch d-flex align-items-center justify-content-between mx-3">
            <label>@settings.AnonymousUsername.label</label>
            <input type="checkbox" role="switch" class="form-check-input" id="anonymousName" @bind="settings.AnonymousUsername.value" />
        </li>
        <li class="list-group-item d-flex align-items-center justify-content-between m-3">
            <a @onclick="NotificationHandler" href="profile/settings#" >Notifications Settings</a>
        </li>
        <li>
            <a @onclick="Logout">Logout</a>
        </li>
    }
    else
    {
        if(thisSetting == "Notifications")
        {
            GenerateInnerListItems(settings.Notifications);
        }
        //add on if there exist more root inner settings
    }
</ul>

@code {
    [CascadingParameter]
    public UserSettings settings { get; set; }
    public Stack<string> selectedInners = new();
    public bool isRoot = true;
    public string thisSetting = "root";

    //Root settings go here
    private bool anonymousName { get; set; } = false;

    private async void NotificationHandler()
    {
        thisSetting = "Notifications";
        isRoot = false;
        selectedInners.Push(thisSetting);
        await StateContainer.SaveSetting();
    }

    private async void LoadLastSetting()
    {
        if (selectedInners.TryPop(out string toLoad))
        {
            //add any other sub settings as options to link their components
            if (toLoad == "Notifications")
            {
                thisSetting = "Notifications";
                isRoot = false;
            }
        }
        else
        {
            isRoot = true;
            thisSetting = "root";
        }
        await StateContainer.SaveSetting();
    }

    private async void Logout(){
        await StateContainer.Logout();
        mediaUploadService.Logout();
        postService.Logout();
        recipeService.Logout();
        userService.Logout();
        NavigationManager.NavigateTo("/");
    }
}