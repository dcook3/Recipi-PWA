@using Recipi_PWA.Services
@using Recipi_PWA.Models;
@using Recipi_PWA.Models.Settings;
@using System.Text.Json;
@using Recipi_PWA.Shared.Profile;

@inject StateContainer state
@inject NavigationManager navi
@inject IIngredientService service

<div class="d-flex flex-column align-items-center" style="width: 100%;">
    @if(ChildContent == null)
    {
        @foreach (Ingredient ing in ingredients)
        {
            <div class="d-flex justify-content-between align-items-center" style="width: 95%;">
                <div class="d-flex align-items-center">
                    <ProfilePicture profilePictureUrl="@ing.ingredientIcon" size="40"></ProfilePicture>
                    <span class="ms-1 fs-4">@ing.ingredientTitle</span>
                </div>
                <Button onclick="@(() => SelectIngredient(ing))" shape="circle">
                    <i class="fa-solid fa-plus"></i>
                </Button>
            </div>
        }
    }
    else
    {
        @ChildContent
    }
</div>

<Modal @ref="modal">
    <Title>
        Select Measurement
    </Title>
    <Body>
        <div class="row m-0">
            @if (!String.IsNullOrEmpty(selectedIngredient.Ingredient.ingredientTitle))
            {
                <span>Please Select a Measurement for "@selectedIngredient.Ingredient.ingredientTitle":</span>
            }
            else
            {
                <span>Please Select a Measurement for the Selected Ingredient:</span>
            }
        </div>
        <div class="row m-0">
            <div class="col-4">
                <input type="number" class="form-control" placeholder="Measurement..." @onchange="HandleMeasurementInputChange" name="measurement value"></input>
            </div>
            <div class="col-8">
                <select class="form-select" @onchange="HandleMeasurementSelectChange" name="measurement unit">
                    @foreach (string unit in metric)
                    {
                        if(metric[0] == unit)
                        {
                            <option value="@unit" selected>@unit</option>
                        }
                        else 
                        {
                            <option value="@unit">@unit</option>
                        }
                    }
                </select>
            </div>
        </div>
    </Body>
    <ButtonGroup>
        <Button bgColor="bg-danger" onclick="@CloseModal" Width="5">
            Go Back
        </Button>
        <Button onclick="@HandleStepIngredientSelection" Width="5">
            Confirm
        </Button>
    </ButtonGroup>
</Modal>


@code {
    [Parameter]
    public List<Ingredient> ingredients { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    public RecipeInformation recipeInfo { get; set; }

    [CascadingParameter]
    public int stepIndex { get; set; }

    [CascadingParameter]
    public int recipeId { get; set; }

    [CascadingParameter]
    public bool isPosting { get; set; }

    StepIngredient selectedIngredient;

    UserSettings settings;

    private Modal modal;

    private string[] imperial = { "lb", "tsp", "tbsp", "cup", "pint", "quart", "oz", "fl oz", "gal" };
    private string[] metric = { "g", "mg", "ml", "L", "kg" };

    protected async void OnInitializedAsync()
    {
        settings = await state.GetSetting();
    }

    private async void HandleStepIngredientSelection()
    {
        recipeInfo.recipe.recipeSteps[stepIndex].stepIngredients.Add(selectedIngredient);
        await state.SaveRecipe(recipeInfo);
        navi.NavigateTo($"/RecipeEditor/{recipeId}/{isPosting}");
    }

    private void SelectIngredient(Ingredient ing)
    {
        selectedIngredient.Ingredient = ing;
        selectedIngredient.IngredientId = ing.ingredientId;
        StateHasChanged();
        OpenModal();
    }

    private void HandleMeasurementSelectChange(ChangeEventArgs args)
    {
        selectedIngredient.IngredientMeasurementUnit = args.Value.ToString() ?? "no unit";
    }

    private void HandleMeasurementInputChange(ChangeEventArgs args)
    {
        selectedIngredient.IngredientMeasurementValue = float.Parse(args.Value.ToString());
    }

    private void OpenModal() => modal.Open();
    private void CloseModal() => modal.Close();
}