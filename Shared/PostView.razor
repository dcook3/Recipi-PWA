@using Recipi_PWA.Models.PostView;

@inject IJSRuntime JSRuntime;

<style>
    .video-container {
        /*float: left;
        z-index: -999;*/
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        overflow: hidden;
    }

        .video-container video {
            /* Make video to at least 100% wide and tall */
            min-width: 100%;
            min-height: 100%;
            /* Setting width & height to auto prevents the browser from stretching or squishing the video */
            width: auto;
            height: auto;
            /* Center the video */
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            overflow: hidden;
            object-fit:cover;
        }
</style>



<div style="width:100%; height: 100%; position:relative; overflow:hidden;">
    
    @if (post != null) {
        <div class="video-container">
            
                <video id="@(vid)-post-video" poster="@post.ThumbnailUrl" onpause="@OnPause" onplay="@OnPlay" autoplay />

           
        </div>

        <div id="@(vid)-post-top" class="post-top d-flex flex-column justify-content-start align-items-center" style="padding-top:10px">
            @if((bool)searchBar){
                <div style="height: calc(5vh + 10px);">
                </div>
            }
            @if(post.Recipe != null)
            {
                <div class="container-fluid px-3 py-1 d-flex flex-row justify-content-start align-items-center text-light" style="font-size: 15px;">
                    <span>Step @(stepIndex + 1): @post.Recipe.RecipeSteps.ElementAt(stepIndex).StepDescription</span>
                </div>
            }
        
            <div class="container-fluid">
                <SeekBar vid="@vid" skipInit="true"></SeekBar>
            </div>
            @if (playingStatus)
            {
                <Button onclick="@TogglePlayback" shape="circle" bgColor=""><i class="fs-1 fa-solid fa-pause text-light"></i></Button>
            }
            else
            {
                <Button onclick="@TogglePlayback" shape="circle" bgColor=""><i class="fs-1 fa-solid fa-play text-light"></i></Button>
            }
        </div>
        <RecipeView post="@post" backUserId="backUserId"></RecipeView>
    }
</div>
<style>
    .post-top > div{
        z-index:1;
    }
</style>
@code {
    [Parameter]
    public Post? post { get; set; }
    [Parameter]
    public bool focused { get; set;  } = true;

    [Parameter]
    public Action? AfterInit { get; set; }

    [Parameter]
    public int? backUserId { get; set; }

    [Parameter]
    public bool? searchBar { get; set; } = false;

    private int stepIndex = 0; 

    private DotNetObjectReference<PostView> _objectReference;

    private string vid { get; set; } = "";

    private bool playingStatus = true;

    private void OnPause()
    {
        if (playingStatus)
        {
            playingStatus = false;
            StateHasChanged();
        }
    }
    private void OnPlay()
    {
        if(!playingStatus)
        {
            playingStatus = true;
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        playingStatus = focused;
        @if(post != null)
        {

            vid = post.PostId.ToString();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && post != null)
        {
            string[] recordings;
            if (post.Recipe != null)
            {

                recordings = new string[post.Recipe.RecipeSteps.Count()];
                for (int i = 0; i < recordings.Length; i++)
                {
                    recordings[i] = post.Recipe.RecipeSteps.ElementAt(i).PostMedia.MediaUrl;
                }
            }
            else
            {
                recordings = new string[1] { post.PostMedia };
            }
            _objectReference = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeVoidAsync("InitPost", vid, (object)recordings, _objectReference, focused);
            if (AfterInit != null)
            {
                AfterInit.Invoke();
            }
        }
    }

    public async void Load()
    {
        vid = post.PostId.ToString();
        StateHasChanged();
        string[] recordings;
        if (post.Recipe != null)
        {

            recordings = new string[post.Recipe.RecipeSteps.Count()];
            for (int i = 0; i < recordings.Length; i++)
            {
                recordings[i] = post.Recipe.RecipeSteps.ElementAt(i).PostMedia.MediaUrl;
            }
        }
        else
        {
            recordings = new string[1] { post.PostMedia };
        }
        _objectReference = DotNetObjectReference.Create(this);

        await JSRuntime.InvokeVoidAsync("InitPost", vid, (object)recordings, _objectReference);
    }

    [JSInvokable("SetStep")]
    public async Task SetStep(int i)
    {
        stepIndex = i;
        StateHasChanged();
    }

    private async void TogglePlayback()
    {
        playingStatus = await JSRuntime.InvokeAsync<bool>("TogglePlayback", vid);
        StateHasChanged();
    }
}
