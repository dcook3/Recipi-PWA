
@{
    string cssStyle = $"cursor: pointer; width: {Width}em; height: {Height}em;";
}

@if(tabIndex != null)
{
    <div class="@bgColor d-flex justify-content-center align-items-center p-2 hover @shapeClass" style="@cssStyle" @onclick="Click" tabindex="@tabIndex">
        @if (status == "loading")
        {
            <LoadingSpinner colorClass="text-light"></LoadingSpinner>
        }
        else
        {
            <div class="text-light">@ChildContent</div>
        }
    </div>
}
else
{
    <div class="@bgColor d-flex justify-content-center align-items-center p-2 hover @shapeClass" style="@cssStyle" @onclick="Click">
        @if (status == "loading")
        {
            <LoadingSpinner colorClass="text-light"></LoadingSpinner>
        }
        else
        {
            <div class="text-light">@ChildContent</div>
        }
    </div>
}


@code {
    [Parameter]
    public Action? onclick { get; set; }
    [Parameter]
    public string status { get; set; } = "ready";
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public string shape { get; set; } = "rect";
    [Parameter]
    public string bgColor {get; set;} = "bg-warning";
    [Parameter]
    public bool disabled { get; set; } = false;
    [Parameter]
    public double? Height { get; set; } = null;
    [Parameter]
    public double? Width { get; set; } = null;
    [Parameter]
    public int? tabIndex { get; set; } = null;

    private string shapeClass = "";

    protected override void OnInitialized()
    {
        if(shape == "rect")
        {
            shapeClass = "rounded-1";
            Height = Height ?? 2;
            Width = Width ?? 6;

        }
        if(shape == "circle")
        {
            shapeClass = "rounded-circle";
            Height = Height ?? 2;
            Width = Width ?? 2;
        }
    }

    protected void Click()
    {
        if(status != "loading" || disabled){
            onclick?.Invoke();  
        }
    }
}
