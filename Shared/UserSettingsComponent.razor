@using Recipi_PWA.Models;
@using Recipi_PWA.Models.Settings;
@inject StateContainer StateContainer
@implements IDisposable

@if (state == null)
{
    <p>loading...</p>
}
else
{
    <CascadingValue Value="@state" IsFixed="false">@ChildContent</CascadingValue>
}

@code {
    private UserSettings state = null;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Init provider");
        StateContainer.Changed += UserSettingsChanged;
        await Refresh();
    }

    public void Dispose()
    {
        StateContainer.Changed -= UserSettingsChanged;
    }

    private async void UserSettingsChanged(object sender, EventArgs e)
    {
        await InvokeAsync(async () =>
        {
            await Refresh();
            StateHasChanged();
        });
    }

    private async Task Refresh()
    {
        Console.WriteLine("Refreshing setting state");
        state = await StateContainer.GetSetting();
    }
}