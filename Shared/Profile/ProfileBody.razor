@using Recipi_PWA.Models;
@using Recipi_PWA.Services;
@inject IRecipeService recipeService;
@inject NavigationManager NavigationManager;
@inject StateContainer state;
@if(cookbook){
    <div class="d-flex flex-row container-fluid p-0">
        <div class="bg-primary text-light p-1" style="width: 50%; text-align: center;">
            Cookbook
        </div>
        <div class="bg-warning text-light p-1" style="width: 50%; text-align: center;" onclick="@ToggleBody">
            Posts
        </div>
    </div>
    <div class="d-flex flex-row align-items-center justify-content-between container-fluid p-1" >
        <FilterBy options="@filterOptions" selectedIndex="@selectedIndex" FilterUpdated="FilterUpdated"></FilterBy>
        <div class="d-flex flex-row align-items-center justify-content-around">
            @if(self){
                <div class="m-1">
                    <Button shape="circle" onclick="@ToggleEdit"><i class="fs-2 fa fa-pen-to-square"></i></Button>
                </div>
                <div class="m-1">
                    <Button shape="circle"><i class="fs-2 fas fa-plus" style="width: 1em;"></i></Button>
                </div>
            }
        </div>
    </div>
    <div class="d-flex flex-column align-items-center justify-content-start container-fluid">
        @if(status == "ready")
        {
            if (editingCookbook)
            {
                @foreach (var recipe in recipes)
                {
                    <CookbookRecipeCard recipe="@recipe" editing="true" OnDelete="@(() => {RemoveRecipe(recipe.RecipeId);})" OnClick="@(() => { NavigationManager.NavigateTo($"/RecipeEditor/{recipe.RecipeId}/false"); })" includeDate="@filterOptions[selectedIndex].Contains("Date")"></CookbookRecipeCard>
                    //OnDelete="@(() => Console.WriteLine("hello"))"
                }
            }
            else
            {
                @foreach (var recipe in recipes)
                {
                    <CookbookRecipeCard recipe="@recipe" editing="false" OnClick="@(() => { NavigationManager.NavigateTo($"/RecipeEditor/{recipe.RecipeId}/false"); })" includeDate="@filterOptions[selectedIndex].Contains("Date")"></CookbookRecipeCard>
                    //OnDelete="@(() => Console.WriteLine("hello"))"
                }
            }

        }
        else if (status == "loading")
        {
            <LoadingSpinner></LoadingSpinner>
        }
        else if(status == "error")
        {
            <div class="text-danger">
                    @eMessage
            </div>
        }

    </div>

}
else
{
    <div class="d-flex flex-row container-fluid p-0">
        <div class="bg-warning text-light p-1" style="width: 50%; text-align: center;" onclick="@ToggleBody">
            Cookbook
        </div>
        <div class="bg-primary text-light p-1" style="width: 50%; text-align: center;">
            Posts
        </div>
    </div>

    <UserPosts userId="@userId"></UserPosts>
}

<Modal @ref="deleteModal">
    <Body>
        Removing your own recipe from your cookbook will permenantly delete it. Are you sure you want to continue?
    </Body>
    <ButtonGroup>
        <button @onclick="CloseDeleteModal" type="button" class="btn btn-primary">No</button>
        <button @onclick="DeleteRecipe" type="button" class="btn btn-secondary">Yes</button>
    </ButtonGroup>
</Modal>

@code {
    [Parameter]
    public bool self { get; set; } = false;
    [Parameter]
    public int userId { get; set; } = 0;

    private bool cookbook = true;

    private List<CookbookRecipe> recipes = new();

    private string status = "loading";

    private string eMessage = "";

    private string[] filterOptions = { "Default", "Popular", "Author", "Date Created: Newest First", "Date Created: Oldest First" };

    private int selectedIndex = 0;

    private bool editingCookbook = false;

    private Modal deleteModal;
    private void ShowDeleteModal() => deleteModal.Open();
    private void CloseDeleteModal() => deleteModal.Close();

    private int selectedRecipeId;

    protected async override Task OnInitializedAsync()
    {
        await GetRecipes();
    }

    private async void RemoveRecipe(int recipeId)
    {
        HttpResponseMessage response = await recipeService.RemoveRecipeFromCookbook(recipeId);

        if (response.IsSuccessStatusCode)
        {
            await GetRecipes();
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();

            Console.WriteLine(message);
            if (message == "You cannot remove your own recipes from your cookbook, please delete or dissociate instead")
            {
                selectedRecipeId = recipeId;
                ShowDeleteModal();
            }
        }
    }

    private async void DeleteRecipe()
    {
        Console.WriteLine("perma delete");
    }

    private async void DissacociateRecipe()
    {
        Console.WriteLine("dissacociate");
    }

    private void ToggleEdit()
    {
        Console.WriteLine("hello??");
        editingCookbook = !editingCookbook;
        StateHasChanged();
    }

    private async void FilterUpdated(int newIndex)
    {
        if(selectedIndex != newIndex)
        {
            selectedIndex = newIndex;
            status = "loading";
            StateHasChanged();
            await GetRecipes();
        }
    }

    private async Task GetRecipes()
    {
        HttpResponseMessage response = await recipeService.GetCookbook(userId, filterOptions[selectedIndex]);


        if (response.IsSuccessStatusCode)
        {
            recipes = await response.Content.ReadFromJsonAsync<List<CookbookRecipe>>();

            if (recipes == null)
            {
                status = "error";
                eMessage = "Error Loading Recipes";
            }
            else
            {
                status = "ready";
            }
        }
        else
        {
            status = "error";
            eMessage = "Error Loading Recipes";
        }
        StateHasChanged();
    }

    private void ToggleBody()
    {
        cookbook = !cookbook;

    }
}
