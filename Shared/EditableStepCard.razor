@using Recipi_PWA.Models

<div class="bg-warning border-0 rounded p-2 my-1" style="width: 65%">
    @if (IsEditing)
    {
        <div class="d-flex flex-column">
            <input class="form-control mb-1" type="text" @bind-value="Step.stepDescription" name="Step.StepOrder">
            <div class="d-flex justify-content-between">
                <a class="text-white" @onclick="HandleInsertIngredient">+ Insert Ingredient</a>
                <a class="text-white" @onclick="ToggleEditing">✔</a>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between bg-warning">
            <div>
                <a @onclick="ShiftUp" class="me-1 text-decoration-none">
                    <i class="fa-solid fa-chevron-up text-white"></i>
                </a>
                <a @onclick="ShiftDown" class="me-1 text-decoration-none">
                    <i class="fa-solid fa-chevron-down text-white"></i>
                </a>
                <span>@Step.stepDescription</span>
            </div>
            <div>
                <a @onclick="ToggleEditing" class="me-1 text-decoration-none">
                    <i class="fa-solid fa-pen-to-square text-white"></i>
                </a>
                <a @onclick="DeleteStep" class="text-decoration-none">
                    <i class="fa-solid fa-trash text-white"></i>
                </a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public RecipeStep Step { get; set; } = new();

    [Parameter]
    public EventCallback DeleteStep { get; set; }

    [Parameter]
    public EventCallback ShiftUp { get; set; }

    [Parameter]
    public EventCallback ShiftDown { get; set; }

    [Parameter]
    public EventCallback HandleInsertIngredient { get; set; }

    public bool IsEditing { get; set; } = false;

    private void ToggleEditing()
    {
        IsEditing = !IsEditing;
        StateHasChanged();
    }
}
