@using Recipi_PWA.Models
@using Recipi_PWA.Services;

@inject IJSRuntime jsr
@inject IHelperService<StepIngredient> helpers
@inject StateContainer state
@inject NavigationManager navi

<div class="bg-warning border-0 rounded p-2 my-1" style="width: 95%">
    @if (IsEditing)
    {
        <div class="d-flex flex-column">
            <InputText class="form-control mb-1" @bind-Value="Step.stepDescription" @ref="descriptionInput"></InputText>
            <div class="d-flex justify-content-between">
                <a class="text-white" @onclick="HandleInsertIngredient">+ Insert Ingredient</a>
                <a class="text-white" @onclick="ToggleEditing">✔</a>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between bg-warning text-white">
            <div>
                <a @onclick="ShiftUp" class="me-1 text-decoration-none text-white">
                    <i class="fa-solid fa-chevron-up"></i>
                </a>
                <a @onclick="ShiftDown" class="me-1 text-decoration-none text-white">
                    <i class="fa-solid fa-chevron-down"></i>
                </a>
                <span class="text-white fs-5">@helpers.FormatDescription(Step.stepDescription, Step.stepIngredients)</span>
            </div>
            <div>
                <a @onclick="ToggleEditing" class="me-1 text-decoration-none text-white">
                    <i class="fa-solid fa-pen-to-square"></i>
                </a>
                <a @onclick="DeleteStep" class="text-decoration-none text-white">
                    <i class="fa-solid fa-trash"></i>
                </a>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public RecipeStep Step { get; set; } = new();

    [Parameter]
    public EventCallback DeleteStep { get; set; }

    [Parameter]
    public EventCallback ShiftUp { get; set; }

    [Parameter]
    public EventCallback ShiftDown { get; set; }

    [CascadingParameter]
    protected RecipeInformation recipeInfo { get; set; }

    [CascadingParameter]
    protected bool isPosting { get; set; }

    private InputText descriptionInput { get; set; }

    public bool IsEditing { get; set; } = false;

    private void ToggleEditing()
    {
        IsEditing = !IsEditing;
        StateHasChanged();
    }

    private async void HandleInsertIngredient()
    {
        int pos = await jsr.InvokeAsync<int>("getSelectedStart", descriptionInput.Element);
        int stepIndex = recipeInfo.recipe.recipeSteps.IndexOf(Step);
        string desc = recipeInfo.recipe.recipeSteps[stepIndex].stepDescription;
        string toInsert = "{" + (recipeInfo.recipe.recipeSteps[stepIndex].stepIngredients.Count) + "}";

        recipeInfo.recipe.recipeSteps[stepIndex].stepDescription = desc.Insert(pos, toInsert);
        await state.SaveRecipe(recipeInfo);

        navi.NavigateTo($"/IngredientSelector/{recipeInfo.recipeId}/{recipeInfo.recipe.recipeSteps.IndexOf(Step)}/{isPosting}");
    }
}
